import React, { useState, useEffect, useContext } from 'react';
import 'bootstrap/dist/css/bootstrap.min.css';
import { useLocation, useNavigate } from 'react-router-dom';
import Confetti from 'react-confetti';
import { Modal } from 'react-bootstrap';

// Khai b√°o bi·∫øn to√†n c·ª•c
import Context from '../../Context/Context';

const CheckoutPage = () => {
  const { token } = useContext(Context);

  const location = useLocation();
  const navigate = useNavigate();
  const cartItems = location.state?.cart || [];
  const totalAmount = location.state?.total || 0;

  const [branches, setBranches] = useState([]);
  const [selectedBranch, setSelectedBranch] = useState(null);
  const [paymentMethods, setPaymentMethods] = useState([]);
  const [selectedPaymentMethod, setSelectedPaymentMethod] = useState('');
  const [address, setAddress] = useState({
    name: '',
    phone: '',
    location: '',
    email: '', // Th√™m tr∆∞·ªùng email
  });
  const [showSuccess, setShowSuccess] = useState(false);
  const [deliveryOption, setDeliveryOption] = useState('atStore'); // M·∫∑c ƒë·ªãnh l√† mua t·∫°i qu·∫ßy

  // Fetch branches
  useEffect(() => {
    const fetchBranches = async () => {
      try {
        const response = await fetch('http://localhost:8082/chain/get_all', {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({}),
        });

        if (response.ok) {
          const data = await response.json();
          setBranches(
            data.map((item) => ({
              id: item.chain_id,
              name: item.name,
              location: item.location,
            }))
          );
        } else {
          console.error('L·ªói khi l·∫•y d·ªØ li·ªáu t·ª´ server');
        }
      } catch (error) {
        console.error('L·ªói k·∫øt n·ªëi:', error);
      }
    };

    fetchBranches();
  }, []);

  // Fetch payment methods
  useEffect(() => {
    const fetchPaymentMethods = async () => {
      try {
        const response = await fetch('http://localhost:8082/payment-methods');
        if (response.ok) {
          const data = await response.json();
          setPaymentMethods(data);
        } else {
          console.error('L·ªói khi l·∫•y ph∆∞∆°ng th·ª©c thanh to√°n');
        }
      } catch (error) {
        console.error('L·ªói k·∫øt n·ªëi:', error);
      }
    };

    fetchPaymentMethods();
  }, []);

  const handleAddressChange = (e) => {
    const { name, value } = e.target;
    setAddress({ ...address, [name]: value });
  };

  const handlePaymentMethodChange = (e) => {
    setSelectedPaymentMethod(e.target.value);
  };

  const calculateTotal = () => {
    return totalAmount;
  };

  const handleBranchSelection = (branchId) => {
    setSelectedBranch(branchId);
  };

  const handleOrderSubmit = () => {
    if (deliveryOption === 'delivery') {
      if (
        !address.name.trim() ||
        !address.phone.trim() ||
        !address.location.trim() ||
        !address.email.trim()
      ) {
        alert('Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin (bao g·ªìm email) cho ƒë·ªãa ch·ªâ giao h√†ng.');
        return;
      }

      if (!selectedPaymentMethod) {
        alert('Vui l√≤ng ch·ªçn ph∆∞∆°ng th·ª©c thanh to√°n.');
        return;
      }
    }

    if (!selectedBranch) {
      alert('Vui l√≤ng ch·ªçn c∆° s·ªü.');
      return;
    }

    // G·ª≠i ƒë∆°n h√†ng
    Submit_Order();
  };

  const Submit_Order = async () => {
    const orderData = {
      name: address.name,
      phone: address.phone,
      location: address.location,
      email: address.email, // Bao g·ªìm email
      product: cartItems,
      chain_id: selectedBranch, // S·ª≠a ch√≠nh t·∫£
      totalAmount: totalAmount,
      paymentMethodId: parseInt(selectedPaymentMethod, 10), // S·ª≠a ch√≠nh t·∫£ v√† th√™m radix
    };

    try {
      const response = await fetch('http://localhost:8082/orders', {
        method: 'POST',
        headers: {
          Authorization: `Bearer ${token}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(orderData),
      });

      if (response.ok) {
        setShowSuccess(true);
      } else {
        const errorData = await response.json();
        console.error('L·ªói khi t·∫°o h√≥a ƒë∆°n:', errorData);
        alert('L·ªói khi t·∫°o h√≥a ƒë∆°n');
      }
    } catch (error) {
      console.error('L·ªói khi t·∫°o h√≥a ƒë∆°n Server:', error);
      alert('L·ªói khi t·∫°o h√≥a ƒë∆°n Server');
    }
  };

  const handleBackToHome = () => {
    navigate('/');
  };

  return (
    <div className="container mt-5">
      <h2 className="text-center mb-4">Thanh to√°n</h2>

      {showSuccess && (
        <>
          <Confetti width={window.innerWidth} height={window.innerHeight} />
          <Modal show={showSuccess} centered>
            <Modal.Body className="text-center p-5">
              <h1 className="text-success mb-4">üéâ Ch√∫c m·ª´ng! üéâ</h1>
              {deliveryOption === 'atStore' ? (
                <p className="fs-4">
                  ƒê∆°n h√†ng c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng! <br />
                  Qu√Ω kh√°ch vui l√≤ng ra b√†n s·ªë{' '}
                  <strong>{Math.floor(Math.random() * 20) + 1}</strong> ƒë·ª£i trong gi√¢y l√°t.
                </p>
              ) : (
                <p className="fs-4">ƒê∆°n h√†ng c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t th√†nh c√¥ng!</p>
              )}
              <p className="fs-5 mb-4">C·∫£m ∆°n b·∫°n ƒë√£ mua s·∫Øm c√πng ch√∫ng t√¥i.</p>
              <button
                className="btn btn-primary btn-lg"
                onClick={handleBackToHome}
                style={{
                  background: 'linear-gradient(90deg, #ff8c00, #ff0080)',
                  border: 'none',
                  color: '#fff',
                  fontWeight: 'bold',
                  borderRadius: '10px',
                  padding: '10px 20px',
                }}
              >
                Quay l·∫°i trang ch·ªß
              </button>
            </Modal.Body>
          </Modal>
        </>
      )}

      {!showSuccess && (
        <>
          {/* Ph∆∞∆°ng th·ª©c nh·∫≠n h√†ng */}
          <div className="card mb-4">
            <div className="card-header">Vui l√≤ng ch·ªçn:</div>
            <div className="card-body">
              <div className="form-check">
                <input
                  className="form-check-input"
                  type="radio"
                  name="deliveryOption"
                  value="atStore"
                  checked={deliveryOption === 'atStore'}
                  onChange={() => setDeliveryOption('atStore')}
                />
                <label className="form-check-label">Mua t·∫°i qu·∫ßy</label>
              </div>
              <div className="form-check">
                <input
                  className="form-check-input"
                  type="radio"
                  name="deliveryOption"
                  value="delivery"
                  checked={deliveryOption === 'delivery'}
                  onChange={() => setDeliveryOption('delivery')}
                />
                <label className="form-check-label">ƒê·∫∑t giao h√†ng</label>
              </div>
            </div>
          </div>

          {/* Ch·ªçn C∆° S·ªü */}
          <div className="card mb-4">
            <div className="card-header">Ch·ªçn C∆° S·ªü</div>
            <div className="card-body">
              {branches.length > 0 ? (
                branches.map((branch) => (
                  <div key={branch.id} className="form-check mb-2">
                    <input
                      className="form-check-input"
                      type="radio"
                      name="branch"
                      value={branch.id}
                      checked={selectedBranch === branch.id}
                      onChange={() => handleBranchSelection(branch.id)}
                    />
                    <label className="form-check-label">
                      {branch.name} - {branch.location}
                    </label>
                  </div>
                ))
              ) : (
                <p>ƒêang t·∫£i danh s√°ch c∆° s·ªü...</p>
              )}
            </div>
          </div>

          {/* Gi·ªè h√†ng */}
          <div className="card mb-4">
            <div className="card-header">Gi·ªè h√†ng</div>
            <div className="card-body">
              {cartItems.map((item) => (
                <div key={item.productId} className="d-flex align-items-center mb-3">
                  <img
                    src={item.img}
                    alt={item.name}
                    style={{ width: '80px', height: '80px', objectFit: 'cover' }}
                  />
                  <div className="ms-3 flex-grow-1">
                    <h5 className="mb-1">{item.title}</h5>
                    <p className="mb-1 text-muted">{item.price.toLocaleString()} VND</p>
                    <span className="text-muted">S·ªë l∆∞·ª£ng: {item.quantity}</span>
                  </div>
                  <p className="mb-0">{(item.price * item.quantity).toLocaleString()} VND</p>
                </div>
              ))}
            </div>
          </div>

          {/* ƒê·ªãa ch·ªâ giao h√†ng */}
          {deliveryOption === 'delivery' && (
            <div className="card mb-4">
              <div className="card-header">ƒê·ªãa ch·ªâ giao h√†ng</div>
              <div className="card-body">
                <div className="mb-3">
                  <label className="form-label">H·ªç v√† t√™n</label>
                  <input
                    type="text"
                    className="form-control"
                    name="name"
                    value={address.name}
                    onChange={handleAddressChange}
                    required
                  />
                </div>
                <div className="mb-3">
                  <label className="form-label">S·ªë ƒëi·ªán tho·∫°i</label>
                  <input
                    type="text"
                    className="form-control"
                    name="phone"
                    value={address.phone}
                    onChange={handleAddressChange}
                    required
                  />
                </div>
                <div className="mb-3">
                  <label className="form-label">Email</label>
                  <input
                    type="email"
                    className="form-control"
                    name="email"
                    value={address.email}
                    onChange={handleAddressChange}
                    required
                  />
                </div>
                <div className="mb-3">
                  <label className="form-label">ƒê·ªãa ch·ªâ</label>
                  <textarea
                    className="form-control"
                    name="location"
                    rows="3"
                    value={address.location}
                    onChange={handleAddressChange}
                    required
                  ></textarea>
                </div>
              </div>
            </div>
          )}

          {/* Ph∆∞∆°ng th·ª©c thanh to√°n */}
          {deliveryOption === 'delivery' && (
            <div className="card mb-4">
              <div className="card-header">Ph∆∞∆°ng th·ª©c thanh to√°n</div>
              <div className="card-body">
                {paymentMethods.length > 0 ? (
                  paymentMethods.map((method) => (
                    <div key={method.paymentMethodId} className="form-check">
                      <input
                        className="form-check-input"
                        type="radio"
                        name="paymentMethod"
                        value={method.paymentMethodId}
                        checked={selectedPaymentMethod === String(method.paymentMethodId)}
                        onChange={handlePaymentMethodChange}
                      />
                      <label className="form-check-label">
                        {method.methodName} - {method.description}
                      </label>
                    </div>
                  ))
                ) : (
                  <p>ƒêang t·∫£i ph∆∞∆°ng th·ª©c thanh to√°n...</p>
                )}
              </div>
            </div>
          )}

          {/* T·ªïng ti·ªÅn */}
          <div className="card">
            <div className="card-body d-flex justify-content-between align-items-center">
              <h5 className="mb-0">T·ªïng ti·ªÅn: {calculateTotal().toLocaleString()} VND</h5>
              <button className="btn btn-primary" onClick={handleOrderSubmit}>
                ƒê·∫∑t h√†ng
              </button>
            </div>
          </div>
        </>
      )}
    </div>
  );
};

export default CheckoutPage;
